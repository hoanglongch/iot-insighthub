name: CI/CD Pipeline - Enhanced

on:
  push:
    branches: [main]

env:
  # Example environment variables for your image repository â€“ set these as GitHub Secrets in production.
  DOCKER_REPO: your-docker-repo
  GO_VERSION: 1.18

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $GOPATH/bin v1.50.1

      - name: Run golangci-lint
        run: |
          golangci-lint run ./...

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run Unit and Integration Tests with Coverage
        run: |
          go test -v -coverprofile=coverage.txt ./...
          go tool cover -func=coverage.txt

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.txt

      - name: Run Static Analysis with go vet and gosec
        run: |
          go vet ./...
          # Install and run gosec for security static analysis.
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          gosec ./...

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Registry
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Build Telemetry Ingestor Image (Multi-stage)
        run: |
          docker build -t $DOCKER_REPO/telemetry-ingestor:latest -f Dockerfile.telemetry .
      - name: Build Secure API Image (Multi-stage)
        run: |
          docker build -t $DOCKER_REPO/secure-api:latest -f Dockerfile.secureapi .

      - name: Scan Telemetry Ingestor Image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: $DOCKER_REPO/telemetry-ingestor:latest

      - name: Scan Secure API Image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: $DOCKER_REPO/secure-api:latest

      - name: Push Docker Images
        run: |
          docker push $DOCKER_REPO/telemetry-ingestor:latest
          docker push $DOCKER_REPO/secure-api:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Infrastructure Repository
        uses: actions/checkout@v3
        with:
          path: infrastructure

      - name: Terraform Init, Plan, and Apply
        working-directory: infrastructure
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          TF_VAR_aws_region: ${{ env.AWS_REGION }}
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_bucket_name: ${{ secrets.BUCKET_NAME }}
          TF_VAR_terraform_state_bucket: ${{ secrets.TERRAFORM_STATE_BUCKET }}
          TF_VAR_terraform_lock_table: ${{ secrets.TERRAFORM_LOCK_TABLE }}
        run: |
          terraform init
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan

      - name: ArgoCD Sync
        run: |
          # Ensure you have configured ArgoCD CLI and credentials in your secrets
          argocd app sync iot-insighthub
          
      - name: Verify Kubernetes Deployment Rollout
        run: |
          kubectl rollout status deployment/secure-api -n your-namespace
          kubectl rollout status deployment/telemetry-ingestor -n your-namespace

      # Optional: Canary or Blue-Green Deployment Step (Pseudo-code)
      #- name: Canary Deployment and Health Check
      #  run: |
      #    # Implement your canary deployment strategy here (e.g., using kubectl patch or Argo Rollouts)
      #    # Verify health of new version; if health checks fail, trigger rollback.
      #    echo "Canary deployment and rollback logic goes here."

  post-deploy:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Generate Deployment Changelog
        run: |
          # Use git logs or a custom script to generate a changelog.
          git log -1 > deployment-changelog.txt
      - name: Upload Changelog
        uses: actions/upload-artifact@v3
        with:
          name: deployment-changelog
          path: deployment-changelog.txt
